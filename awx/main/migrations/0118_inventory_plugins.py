# Generated by Django 2.2.11 on 2020-07-20 19:56

import logging
import json

from django.db import migrations

from awx.main.models.inventory import InventorySourceOptions

from ._inventory_source_vars import FrozenInjectors


logger = logging.getLogger('awx.main.migrations')
BACKUP_FILENAME = '/tmp/tower_migration_inventory_source_vars.json'


class InventorySourceOptionsWrapper(InventorySourceOptions):
    '''
    InventorySource inherits from InventorySourceOptions but that is not
    "recorded" by Django's app registry model tracking. This will, effectively,
    reintroduce the inheritance.
    '''
    def __init__(self, *args, **kw):
        self.target = kw.pop('target')
        super().__init__(self, *args, **kw)
    def __getattr__(self, attr):
        return getattr(self.target, attr)


def _get_inventory_sources(InventorySource):
    return InventorySource.objects.filter(source__in=['ec2', 'gce', 'azure_rm', 'vmware', 'satellite6', 'openstack', 'rhv', 'tower'])


def inventory_source_vars_forward(apps, schema_editor):
    InventorySource = apps.get_model("main", "InventorySource")
    source_vars_backup = dict()

    for inv_source_obj in _get_inventory_sources(InventorySource):
        inv_source_obj = InventorySourceOptionsWrapper(target=inv_source_obj)
        if inv_source_obj.source in FrozenInjectors:
            source_vars_backup[inv_source_obj.id] = dict(inv_source_obj.source_vars_dict)
            with open(BACKUP_FILENAME, 'w') as fh:
                json.dump(source_vars_backup, fh)

            injector = FrozenInjectors[inv_source_obj.source]()
            new_inv_source_vars = injector.inventory_as_dict(inv_source_obj, None)
            inv_source_obj.source_vars = new_inv_source_vars
            inv_source_obj.save()


def inventory_source_vars_backward(apps, schema_editor):
    try:
        with open(BACKUP_FILENAME, 'r') as fh:
            source_vars_backup = json.load(fh)
    except FileNotFoundError:
        print(f"Rollback file not found {BACKUP_FILENAME}")
        return

    for inv_source_obj in _get_inventory_sources():
        if inv_source_obj.id in source_vars_backup:
            inv_source_obj.source_vars = source_vars_backup[inv_source_obj.id]
            inv_source_obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0117_v400_remove_cloudforms_inventory'),
    ]

    operations = [
        migrations.RunPython(inventory_source_vars_forward, inventory_source_vars_backward,),
        migrations.RemoveField(
            model_name='inventorysource',
            name='group_by',
        ),
        migrations.RemoveField(
            model_name='inventoryupdate',
            name='group_by',
        ),
        migrations.RemoveField(
            model_name='inventorysource',
            name='instance_filters',
        ),
        migrations.RemoveField(
            model_name='inventoryupdate',
            name='instance_filters',
        ),
        migrations.RemoveField(
            model_name='inventorysource',
            name='source_regions',
        ),
        migrations.RemoveField(
            model_name='inventoryupdate',
            name='source_regions',
        ),
    ]
