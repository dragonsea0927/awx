# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-02-26 17:39
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion

import yaml
import json


def forwards_func(apps, schema_editor):
    Topology = apps.get_model("network_ui", "Topology")
    Topology.objects.get_or_create(name="Unknown", topology_id=-1, panX=0, panY=0, scale=1.0)
    Device = apps.get_model("network_ui", "Device")
    Device.objects.get_or_create(name="Unknown", device_id=-1, x=0, y=0, type="unknown", id=-1, topology_id=-1)
    Interface = apps.get_model("network_ui", "Interface")
    Interface.objects.get_or_create(name="Unknown", device_id=-1, interface_id=-1)



def add_load_test_case(apps, schema_editor):

    TestCase = apps.get_model('network_ui', 'TestCase')
    TestCase.objects.get_or_create(name="Load", test_case_data=json.dumps(dict(runnable=False)))


messages = yaml.load('''
messages:
    - {msg_type: DeviceMove, fields: [msg_type, sender, id, x, y, previous_x, previous_y]}
    - {msg_type: DeviceInventoryUpdate, fields: [msg_type, sender, id, host_id]}
    - {msg_type: GroupInventoryUpdate, fields: [msg_type, sender, id, group_id]}
    - {msg_type: DeviceCreate, fields: [msg_type, sender, id, x, y, name, type, host_id]}
    - {msg_type: DeviceDestroy, fields: [msg_type, sender, id, previous_x, previous_y, previous_name, previous_type, previous_host_id]}
    - {msg_type: DeviceLabelEdit, fields: [msg_type, sender, id, name, previous_name]}
    - {msg_type: DeviceSelected, fields: [msg_type, sender, id]}
    - {msg_type: DeviceUnSelected, fields: [msg_type, sender, id]}
    - {msg_type: InterfaceCreate, fields: [msg_type, sender, device_id, id, name]}
    - {msg_type: InterfaceLabelEdit, fields: [msg_type, sender, id, device_id, name, previous_name]}
    - {msg_type: LinkLabelEdit, fields: [msg_type, sender, id, name, previous_name]}
    - {msg_type: LinkCreate, fields: [msg_type, id, sender, name, from_device_id, to_device_id, from_interface_id, to_interface_id]}
    - {msg_type: LinkDestroy, fields: [msg_type, id, sender, name, from_device_id, to_device_id, from_interface_id, to_interface_id]}
    - {msg_type: LinkSelected, fields: [msg_type, sender, id]}
    - {msg_type: LinkUnSelected, fields: [msg_type, sender, id]}
    - {msg_type: Undo, fields: [msg_type, sender, original_message]}
    - {msg_type: Redo, fields: [msg_type, sender, original_message]}
    - {msg_type: Deploy, fields: [msg_type, sender]}
    - {msg_type: Destroy, fields: [msg_type, sender]}
    - {msg_type: Discover, fields: [msg_type, sender]}
    - {msg_type: Layout, fields: [msg_type, sender]}
    - {msg_type: MultipleMessage, fields: [msg_type, sender, messages]}
    - {msg_type: MouseEvent, fields: [msg_type, sender, x, y, type, trace_id]}
    - {msg_type: MouseWheelEvent, fields: [msg_type, sender, delta, deltaX, deltaY, type, originalEvent, trace_id]}
    - {msg_type: KeyEvent, fields: [msg_type, sender, key, keyCode, type, altKey, shiftKey, ctrlKey, metaKey, trace_id]}
    - {msg_type: StartRecording, fields: [msg_type, sender, trace_id]}
    - {msg_type: StopRecording, fields: [msg_type, sender, trace_id]}
    - {msg_type: ViewPort, fields: [msg_type, sender, scale, panX, panY, trace_id]}
    - {msg_type: CopySite, fields: [msg_type, site]}
    - {msg_type: GroupMove, fields: [msg_type, sender, id, x1, y1, x2, y2, previous_x1, previous_y1, previous_x2, previous_y2]}
    - {msg_type: GroupCreate, fields: [msg_type, sender, id, x1, y1, x2, y2, name, type, group_id]}
    - {msg_type: GroupDestroy, fields: [msg_type, sender, id, previous_x1, previous_y1, previous_x2,
                     previous_y2, previous_name, previous_type, previous_group_id]}
    - {msg_type: GroupLabelEdit, fields: [msg_type, sender, id, name, previous_name]}
    - {msg_type: GroupSelected, fields: [msg_type, sender, id]}
    - {msg_type: GroupUnSelected, fields: [msg_type, sender, id]}
    - {msg_type: GroupMembership, fields: [msg_type, sender, id, members]}
    - {msg_type: ProcessCreate, fields: [msg_type, id, name, type, device_id, x, y]}
    - {msg_type: StreamCreate, fields: [msg_type, sender, id, from_id, to_id, label]}
    - {msg_type: StreamDestroy, fields: [msg_type, sender, id, from_id, to_id, label]}
    - {msg_type: StreamLabelEdit, fields: [msg_type, sender, id, label, previous_label]}
    - {msg_type: StreamSelected, fields: [msg_type, sender, id]}
    - {msg_type: StreamUnSelected, fields: [msg_type, sender, id]}
    - {msg_type: FSMTrace, fields: [msg_type, order, sender, trace_id, fsm_name, from_state, to_state, recv_message_type]}
    - {msg_type: ChannelTrace, fields: [msg_type, sender, trace_id, from_fsm, to_fsm, sent_message_type]}
    - {msg_type: Snapshot, fields: [msg_type, sender, devices, links, groups, streams, order, trace_id]}
    - {msg_type: EnableTest, fields: [msg_type]}
    - {msg_type: DisableTest, fields: [msg_type]}
    - {msg_type: StartTest, fields: [msg_type]}
    - {msg_type: TestCompleted, fields: [msg_type]}
    - {msg_type: TestResult, fields: [msg_type, sender, id, name, result, date, code_under_test]}
    - {msg_type: Coverage, fields: [msg_type, sender, coverage, result_id]}

''')


def populate_message_types(apps, schema_editor):

    MessageType = apps.get_model('network_ui', 'MessageType')
    for message in messages['messages']:
        MessageType.objects.get_or_create(name=message['msg_type'])


results = ['passed',
           'failed',
           'errored',
           'skipped',
           'aborted',
           'not run',
           'blocked']


def populate_result_types(apps, schema_editor):

    Result = apps.get_model('network_ui', 'Result')
    for result in results:
        Result.objects.get_or_create(name=result)


class Migration(migrations.Migration):

    replaces = [(b'network_ui', '0001_initial'),
                (b'network_ui', '0002_remove_topology_id'),
                (b'network_ui', '0003_device_type'),
                (b'network_ui', '0004_client_messagetype_topologyhistory'),
                (b'network_ui', '0005_topologyhistory_undone'),
                (b'network_ui', '0006_auto_20170321_1236'),
                (b'network_ui', '0007_auto_20170328_1655'),
                (b'network_ui', '0008_interface_id'),
                (b'network_ui', '0009_auto_20170403_1912'),
                (b'network_ui', '0010_link_id'),
                (b'network_ui', '0011_link_name'),
                (b'network_ui', '0012_auto_20170706_1526'),
                (b'network_ui', '0013_auto_20170710_1840'),
                (b'network_ui', '0014_group_topology'),
                (b'network_ui', '0015_auto_20170710_1937'),
                (b'network_ui', '0016_auto_20170717_1520'),
                (b'network_ui', '0017_auto_20170717_1813'),
                (b'network_ui', '0018_auto_20170821_1557'),
                (b'network_ui', '0019_auto_20170822_1723'),
                (b'network_ui', '0020_device_process_id_seq'),
                (b'network_ui', '0021_toolbox_toolboxitem'),
                (b'network_ui', '0022_fsmtrace'),
                (b'network_ui', '0023_auto_20171213_1623'),
                (b'network_ui', '0024_auto_20171213_1949'),
                (b'network_ui', '0025_devicehost_topologyinventory'),
                (b'network_ui', '0026_auto_20180105_1403'),
                (b'network_ui', '0027_eventtrace'),
                (b'network_ui', '0028_coverage'),
                (b'network_ui', '0029_topologysnapshot'),
                (b'network_ui', '0030_auto_20180110_1751'),
                (b'network_ui', '0031_auto_20180110_1752'),
                (b'network_ui', '0032_auto_20180112_2135'),
                (b'network_ui', '0033_auto_20180112_2202'),
                (b'network_ui', '0034_auto_20180113_1725'),
                (b'network_ui', '0035_auto_20180223_0040'),
                (b'network_ui', '0036_auto_20180223_0119')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('device_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('x', models.IntegerField()),
                ('y', models.IntegerField()),
                ('id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('link_id', models.AutoField(primary_key=True, serialize=False)),
                ('from_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='network_ui.Device')),
                ('to_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='network_ui.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Topology',
            fields=[
                ('topology_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('scale', models.FloatField()),
                ('panX', models.FloatField()),
                ('panY', models.FloatField()),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='topology',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Topology'),
        ),
        migrations.AddField(
            model_name='device',
            name='type',
            field=models.CharField(default='', max_length=200),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='MessageType',
            fields=[
                ('message_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='TopologyHistory',
            fields=[
                ('topology_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('message_id', models.IntegerField()),
                ('message_data', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client')),
                ('message_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.MessageType')),
                ('topology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Topology')),
                ('undone', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('interface_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Device')),
            ],
        ),
        migrations.RunPython(
            code=forwards_func,
        ),
        migrations.AddField(
            model_name='link',
            name='from_interface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_link', to='network_ui.Interface'),
        ),
        migrations.AddField(
            model_name='link',
            name='to_interface',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_link', to='network_ui.Interface'),
        ),
        migrations.AddField(
            model_name='interface',
            name='id',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='link',
            name='from_device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_link', to='network_ui.Device'),
        ),
        migrations.AlterField(
            model_name='link',
            name='to_device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_link', to='network_ui.Device'),
        ),
        migrations.AddField(
            model_name='link',
            name='id',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='link',
            name='name',
            field=models.CharField(default='', max_length=200),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='device',
            name='interface_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='topology',
            name='device_id_seq',
            field=models.IntegerField(default=0, verbose_name=b'Topology'),
        ),
        migrations.AddField(
            model_name='topology',
            name='link_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('id', models.IntegerField(verbose_name=b'Group')),
                ('name', models.CharField(max_length=200)),
                ('x1', models.IntegerField()),
                ('y1', models.IntegerField(verbose_name=b'Group')),
                ('x2', models.IntegerField(verbose_name=b'Group')),
                ('y2', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GroupDevice',
            fields=[
                ('group_device_id', models.AutoField(primary_key=True, serialize=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Device')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Group')),
            ],
        ),
        migrations.AddField(
            model_name='topology',
            name='group_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='group',
            name='topology',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='network_ui.Topology'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='DataBinding',
            fields=[
                ('data_binding_id', models.AutoField(primary_key=True, serialize=False, verbose_name=b'DataBinding')),
                ('column', models.IntegerField()),
                ('row', models.IntegerField()),
                ('table', models.CharField(max_length=200)),
                ('primary_key_id', models.IntegerField()),
                ('field', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='DataSheet',
            fields=[
                ('data_sheet_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('topology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Topology')),
                ('client', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client')),
            ],
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('data_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.AddField(
            model_name='databinding',
            name='data_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.DataType'),
        ),
        migrations.AddField(
            model_name='databinding',
            name='sheet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.DataSheet'),
        ),
        migrations.AlterField(
            model_name='databinding',
            name='data_binding_id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='group',
            name='id',
            field=models.IntegerField(),
        ),
        migrations.AlterField(
            model_name='group',
            name='x2',
            field=models.IntegerField(),
        ),
        migrations.AlterField(
            model_name='group',
            name='y1',
            field=models.IntegerField(),
        ),
        migrations.AlterField(
            model_name='topology',
            name='device_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('process_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=200)),
                ('id', models.IntegerField(default=0)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('stream_id', models.AutoField(primary_key=True, serialize=False, verbose_name=b'Stream')),
                ('label', models.CharField(max_length=200)),
                ('id', models.IntegerField(default=0)),
                ('from_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_stream', to='network_ui.Device')),
                ('to_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_stream', to='network_ui.Device')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='type',
            field=models.CharField(default='', max_length=200),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='topology',
            name='stream_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='topology',
            name='group_id_seq',
            field=models.IntegerField(default=0, verbose_name=b'Topology'),
        ),
        migrations.AddField(
            model_name='device',
            name='process_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='Toolbox',
            fields=[
                ('toolbox_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ToolboxItem',
            fields=[
                ('toolbox_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.TextField()),
                ('toolbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Toolbox')),
            ],
        ),
        migrations.CreateModel(
            name='FSMTrace',
            fields=[
                ('fsm_trace_id', models.AutoField(primary_key=True, serialize=False)),
                ('fsm_name', models.CharField(max_length=200)),
                ('from_state', models.CharField(max_length=200)),
                ('to_state', models.CharField(max_length=200)),
                ('message_type', models.CharField(max_length=200)),
                ('trace_session_id', models.IntegerField(default=0)),
                ('order', models.IntegerField(default=0)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client')),
            ],
        ),
        migrations.CreateModel(
            name='TopologyInventory',
            fields=[
                ('topology_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('inventory_id', models.IntegerField()),
                ('topology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Topology')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='host_id',
            field=models.IntegerField(default=0),
        ),
        migrations.CreateModel(
            name='EventTrace',
            fields=[
                ('event_trace_id', models.AutoField(primary_key=True, serialize=False)),
                ('trace_session_id', models.IntegerField(default=0)),
                ('event_data', models.TextField()),
                ('message_id', models.IntegerField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client')),
            ],
        ),
        migrations.CreateModel(
            name='Coverage',
            fields=[
                ('coverage_id', models.AutoField(primary_key=True, serialize=False)),
                ('coverage_data', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TopologySnapshot',
            fields=[
                ('topology_snapshot_id', models.AutoField(primary_key=True, serialize=False)),
                ('topology_id', models.IntegerField()),
                ('trace_session_id', models.IntegerField()),
                ('snapshot_data', models.TextField(verbose_name=b'TopologySnapshot')),
                ('order', models.IntegerField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client')),
            ],
        ),
        migrations.CreateModel(
            name='CodeUnderTest',
            fields=[
                ('code_under_test_id', models.AutoField(primary_key=True, serialize=False, verbose_name=b'CodeUnderTest')),
                ('version_x', models.IntegerField()),
                ('version_y', models.IntegerField()),
                ('version_z', models.IntegerField()),
                ('commits_since', models.IntegerField()),
                ('commit_hash', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('test_case_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name=b'TestCase')),
                ('test_case_data', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('test_result_id', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.DateTimeField()),
                ('code_under_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.CodeUnderTest')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.Result')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network_ui.TestCase')),
            ],
        ),
        migrations.AddField(
            model_name='coverage',
            name='test_result',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='network_ui.TestResult'),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=populate_result_types,
        ),
        migrations.AddField(
            model_name='testresult',
            name='client',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='network_ui.Client'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='testresult',
            name='id',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            code=add_load_test_case,
        ),
        migrations.AddField(
            model_name='group',
            name='inventory_group_id',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='topology',
            name='group_id_seq',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            code=populate_message_types,
        ),
    ]
